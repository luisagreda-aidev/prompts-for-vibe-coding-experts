--- ENGLISH PROMPT ---

<goal>
**Objective:** Determine information from a user-assistant conversation that is useful to remember for future conversations.
</goal>

<thinking_process_en>
1.  **Understand Core Objective:** Internalize the primary goal: to extract memorable information from conversations for future use.
</thinking_process_en>

<positive_criteria>
**Include (MUST be specific and actionable/guiding):**
- High-level preferences about how the user likes to work.
- General patterns or approaches the user prefers.
- Specific technical preferences (e.g., exact coding style rules, framework choices).
- Common pain points or frustrations to avoid.
- Workflow preferences or requirements (MUST include concrete steps or rules).
- Any recurring themes in their requests (MUST be specific enough to guide future responses).
- Anything the user explicitly asks to remember.
- Any strong opinions expressed by the user.
</positive_criteria>

<thinking_process_en>
1.  **Scan for Keywords/Phrases:** Look for explicit statements of preference, recurring themes, strong opinions, or direct requests to remember.
2.  **Assess Actionability/Specificity:** For each potential memory, evaluate if it meets the criteria of being specific, actionable, or providing clear guidance for future interactions.
3.  **Filter for High-Level/General Patterns:** Prioritize information that represents a general working style, technical preference, or workflow, rather than one-off details.
</thinking_process_en>

<negative_criteria>
**Do NOT include:**
- One-time task-specific details that don't generalize.
- Implementation specifics that won't be reused.
- Temporary context that won't be relevant later.
- Context that comes purely from the assistant chat, not the user chat.
- Information that ONLY applies to the specific files, functions, or code snippets discussed in the current conversation and is not broadly applicable.
- Vague or obvious preferences that aren't actionable.
- General statements about good programming practices that any user would want.
- Basic software engineering principles such as separating concerns, DRY, SOLID, YAGNI, KISS, etc.
</negative_criteria>

<thinking_process_en>
1.  **Filter for Specificity/Generality:** Exclude memories that are too narrow (task-specific, implementation details, temporary context) or too broad/obvious (general best practices, vague preferences).
2.  **Source Check:** Ensure the information originates from the user's input, not solely from the assistant's responses.
3.  **Reusability Assessment:** Discard information that is unlikely to be relevant or reusable in future, unrelated conversations.
</thinking_process_en>

<examples_should_not_remember>
- Provides examples of memories that should NOT be remembered, with explanations of why they violate the negative criteria (e.g., too specific, one-off, vague, assistant-generated).
</examples_should_not_remember>

<thinking_process_en>
1.  **Analyze Negative Examples:** Study the provided examples to reinforce understanding of what *not* to remember.
2.  **Pattern Recognition:** Identify common pitfalls in memory creation (e.g., confusing specific task details with general preferences).
</thinking_process_en>

<examples_should_remember>
- Provides examples of memories that SHOULD be remembered, with explanations of why they meet the positive criteria (e.g., specific and actionable, clear preference, clear workflow).
</examples_should_remember>

<thinking_process_en>
1.  **Analyze Positive Examples:** Study the provided examples to reinforce understanding of what *to* remember.
2.  **Pattern Recognition:** Identify characteristics of valuable memories (e.g., clear, actionable preferences that can guide future behavior).
</thinking_process_en>

<labeling_instructions>
- **Labeling:** The label should be descriptive of the general concept being captured.
- **Format:** The label will be used as a filename and can only have letters and hyphens.
</labeling_instructions>

<thinking_process_en>
1.  **Concept Abstraction:** Abstract the specific conversation detail into a general concept.
2.  **Filename Compliance:** Ensure the label is descriptive and adheres to filename conventions (letters and hyphens only).
</thinking_process_en>

<formatting_instructions>
- **JSON Format:** Return response in the following JSON format:
```json
{
	"explanation": "Explain here, for every negative example, why the memory below does *not* violate any of the negative criteria. Be specific about which negative criteria it avoids.",
	"memory": "preference-name: The general preference or approach to remember. DO NOT include specific details from the current conversation. Keep it short, to max 3 sentences. Do not use examples that refer to the conversation."
}
```
- **No Memory Needed:** If no memory is needed, return exactly: "no_memory_needed".
</formatting_instructions>

<thinking_process_en>
1.  **Output Decision:** Based on the analysis against positive and negative criteria, decide whether a memory is needed.
2.  **Memory Formulation (if needed):** If a memory is needed, formulate it concisely (max 3 sentences), abstracting away conversation-specific details and examples.
3.  **Explanation Formulation (if needed):** For each negative criterion, explain why the proposed memory does *not* violate it.
4.  **JSON Construction:** Construct the JSON output precisely according to the specified format.
5.  **No Memory Output:** If no memory is needed, output the exact string "no_memory_needed".
</thinking_process_en>

--- SPANISH PROMPT ---

<goal>
**Objetivo:** Determinar la información de una conversación entre usuario y asistente que sea útil recordar para futuras conversaciones.
</goal>

<thinking_process_es>
1.  **Comprender el Objetivo Principal:** Internalizar el objetivo principal: extraer información memorable de las conversaciones para uso futuro.
</thinking_process_es>

<positive_criteria>
**Incluir (DEBE ser específico y accionable/orientador):**
- Preferencias de alto nivel sobre cómo le gusta trabajar al usuario.
- Patrones o enfoques generales que el usuario prefiere.
- Preferencias técnicas específicas (ej., reglas exactas de estilo de codificación, elecciones de framework).
- Puntos débiles o frustraciones comunes a evitar.
- Preferencias o requisitos de flujo de trabajo (DEBE incluir pasos o reglas concretas).
- Cualquier tema recurrente en sus solicitudes (DEBE ser lo suficientemente específico para guiar futuras respuestas).
- Cualquier cosa que el usuario pida explícitamente recordar.
- Cualquier opinión fuerte expresada por el usuario.
</positive_criteria>

<thinking_process_es>
1.  **Escanear Palabras Clave/Frases:** Buscar declaraciones explícitas de preferencia, temas recurrentes, opiniones fuertes o solicitudes directas para recordar.
2.  **Evaluar Accionabilidad/Especificidad:** Para cada posible memoria, evaluar si cumple con los criterios de ser específica, accionable o de proporcionar una guía clara para futuras interacciones.
3.  **Filtrar por Patrones de Alto Nivel/Generales:** Priorizar la información que represente un estilo de trabajo general, una preferencia técnica o un flujo de trabajo, en lugar de detalles únicos.
</thinking_process_es>

<negative_criteria>
**NO incluir:**
- Detalles únicos específicos de la tarea que no se generalizan.
- Especificaciones de implementación que no se reutilizarán.
- Contexto temporal que no será relevante más adelante.
- Contexto que proviene puramente del chat del asistente, no del chat del usuario.
- Información que SÓLO se aplica a los archivos, funciones o fragmentos de código específicos discutidos en la conversación actual y que no es ampliamente aplicable.
- Preferencias vagas u obvias que no son accionables.
- Declaraciones generales sobre buenas prácticas de programación que cualquier usuario desearía.
- Principios básicos de ingeniería de software como la separación de preocupaciones, DRY, SOLID, YAGNI, KISS, etc.
</negative_criteria>

<thinking_process_es>
1.  **Filtrar por Especificidad/Generalidad:** Excluir memorias que sean demasiado estrechas (task-specific, implementation details, temporary context) o demasiado amplias/obvias (general best practices, vague preferences).
2.  **Verificación de Fuente:** Asegurar que la información provenga de la entrada del usuario, no únicamente de las respuestas del asistente.
3.  **Evaluación de Reutilización:** Descartar información que probablemente no sea relevante o reutilizable en conversaciones futuras no relacionadas.
</thinking_process_es>

<examples_should_not_remember>
- Proporciona ejemplos de memorias que NO deben recordarse, con explicaciones de por qué violan los criterios negativos (ej., demasiado específicas, únicas, vagas, generadas por el asistente).
</examples_should_not_remember>

<thinking_process_es>
1.  **Analizar Ejemplos Negativos:** Estudiar los ejemplos proporcionados para reforzar la comprensión de lo que *no* se debe recordar.
2.  **Reconocimiento de Patrones:** Identificar errores comunes en la creación de memorias (ej., confundir detalles específicos de la tarea con preferencias generales).
</thinking_process_es>

<examples_should_remember>
- Proporciona ejemplos de memorias que SÍ deben recordarse, con explicaciones de por qué cumplen los criterios positivos (ej., preferencia específica y accionable, preferencia clara, flujo de trabajo claro).
</examples_should_remember>

<thinking_process_es>
1.  **Analizar Ejemplos Positivos:** Estudiar los ejemplos proporcionados para reforzar la comprensión de lo que *sí* se debe recordar.
2.  **Reconocimiento de Patrones:** Identificar características de memorias valiosas (ej., preferencias claras y accionables que pueden guiar el comportamiento futuro).
</thinking_process_es>

<labeling_instructions>
- **Etiquetado:** La etiqueta debe ser descriptiva del concepto general que se está capturando.
- **Formato:** La etiqueta se utilizará como nombre de archivo y solo puede contener letras y guiones.
</labeling_instructions>

<thinking_process_es>
1.  **Abstracción de Conceptos:** Abstraer el detalle específico de la conversación en un concepto general.
2.  **Cumplimiento del Nombre de Archivo:** Asegurar que la etiqueta sea descriptiva y cumpla con las convenciones de nombres de archivo (solo letras y guiones).
</thinking_process_es>

<formatting_instructions>
- **Formato JSON:** Devolver la respuesta en el siguiente formato JSON:
```json
{
	"explanation": "Explicar aquí, para cada ejemplo negativo, por qué la memoria a continuación *no* viola ninguno de los criterios negativos. Ser específico sobre qué criterios negativos evita.",
	"memory": "nombre-preferencia: La preferencia o enfoque general a recordar. NO incluir detalles específicos de la conversación actual. Mantenerlo corto, máximo 3 oraciones. No usar ejemplos que hagan referencia a la conversación."
}
```
- **No se Necesita Memoria:** Si no se necesita memoria, devolver exactamente: "no_memory_needed".
</formatting_instructions>

<thinking_process_es>
1.  **Decisión de Salida:** Basado en el análisis contra los criterios positivos y negativos, decidir si se necesita una memoria.
2.  **Formulación de la Memoria (si es necesario):** Si se necesita una memoria, formularla de forma concisa (máximo 3 oraciones), abstrayendo los detalles y ejemplos específicos de la conversación.
3.  **Formulación de la Explicación (si es necesario):** Para cada criterio negativo, explicar por qué la memoria propuesta *no* lo viola.
4.  **Construcción de JSON:** Construir la salida JSON con precisión según el formato especificado.
5.  **Salida Sin Memoria:** Si no se necesita memoria, generar la cadena exacta "no_memory_needed".
</thinking_process_es>